id: "9"
name: "Merge Sorted Arrays"
description: "Implement a function that merges two sorted arrays into a single sorted array. The merged array should also be sorted."
difficulty: "championship"
par: 4

# Function signature to implement
function_name: "mergeSortedArrays"
parameters:
  - name: "arr1"
    type: "number[]"
  - name: "arr2"
    type: "number[]"
return_type: "number[]"

# Starting template code
starting_code: |
  function mergeSortedArrays(arr1, arr2) {
    // Your implementation here
  }

# TDD tests in sequence of increasing complexity
tests:
  - name: "handles empty arrays"
    code: "mergeSortedArrays([], [])"
    expected: []
    hint: "Merging two empty arrays should return an empty array"

  - name: "handles one empty array"
    code: "mergeSortedArrays([1, 2, 3], [])"
    expected: [1, 2, 3]
    hint: "If one array is empty, return the other array"

  - name: "handles simple merge scenario"
    code: "mergeSortedArrays([1, 3, 5], [2, 4, 6])"
    expected: [1, 2, 3, 4, 5, 6]
    hint: "Merge and maintain the sorted order"

  - name: "handles duplicate values"
    code: "mergeSortedArrays([1, 2, 3], [2, 3, 4])"
    expected: [1, 2, 2, 3, 3, 4]
    hint: "Keep all duplicates in the result"

  - name: "handles arrays of different lengths"
    code: "mergeSortedArrays([1, 5, 9], [2, 3, 4, 6, 7, 8])"
    expected: [1, 2, 3, 4, 5, 6, 7, 8, 9]
    hint: "Handle the case where one array is longer than the other"

  - name: "handles large value differences"
    code: "mergeSortedArrays([1, 100, 200], [2, 3, 300])"
    expected: [1, 2, 3, 100, 200, 300]
    hint: "Correctly order values with large differences"

# Expected solution approaches
solution_approaches:
  - name: "Two-Pointer Technique"
    description: "Use two pointers to track positions in each array, comparing and adding the smaller value to the result"

  - name: "Concat and Sort"
    description: "Concatenate the arrays and then sort the resulting array (less efficient but simple)"

# Learning objectives
learning_objectives:
  - "Understanding array manipulation and traversal"
  - "Implementing efficient sorting algorithms"
  - "Using the two-pointer technique for optimization"
  - "Handling edge cases in array operations"